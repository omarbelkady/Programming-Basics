Program Design
Pseudocode
Flowcharts: Diagram that informs the public what logic your program is following
Integrated Development Environment:  The application that build and runs our programs
Version Control: A system that tracks changes to a file/set of files over time
for us to keep record of specific versions later on
Input and Output: Input is what I send to the compiler and output is what I get back
Data and Operators: 
Constants and Variables: Immutable vs Mutables
Identifier Names= myName, hisName
Primitive Data Types(Int, Float, String, Boolean, Double,Char)
Derived Data Types(e.g. When you define class. You use these tools: Pointers, Arrays, Structures, Classes, Union, Enumeration, etc.)
Order of Operations: PEMDAS
Assignment: =
Arithmetic:+,-,*,/,%,**   
Comparison/Relational Ops: ==, < , > , <= , >= , !=
Assignment vs Equality(= vs == vs ===)
Data Type Conversions(casting or type coercion): changing a variable from one data type to another
Functions: we create a function to make our lives easier and make our code shorter and remember the bottom REUSABILITY
Modular Programming: software design technique that emphasizes separating the 
functionality of a program into independent, interchangeable modules
Parameters and Arguments: void add(int i, int j){ cout<<i+j<<endl;} 
add(4,5) ..... In this case i and j are the parameters they are your functions signature and 4 and 5 are your arguments.
Pass by Value vs Pass by Reference: 
            Pass By Value: make a copy of the value in memory e.g. example above 4 and 5 are copied to memory. When I want to use the parameter for a computation
            Pass By Reference: keep a log of the variable's location in memory so that I don't want soemthing to be changed.
Return Condition(Value or Void): Do I want something to be returned to me back in the console(return) or not(void).
Scope(Who can access what): Control who has access to certain elements within my application public, protected and private.
Conditionals(if this happens then do this). If this conditions evaluates to true execute this piece of code. Do while loop runs at least once.
While loop check a condtion if it is met and keeps on executing until it evaluates to false.
If Then Else Structure. IF a certain condition is met do this.
Iteration. How many times do I want to go over my piece of code. 

Branching Statements using the keyword break, continue, return
Integer Overflow: 
Underflow: When the magnitude of the operation is too small or is out of range of the specified data type usually when you try to subtract
a super small number from a smaller number that it is out of range of the data type which can handle.
Nested Loops: a loop within a loop for(int i =1;i=3;i++){for(int j=1;j<3;j++){cout<<b[i][j];}}
Arrays: structure of data which can store a fixed or unfixed(using a variable) size of elements within it
Array Methods(.add, .remove)
Members: I create an array of integers say 4,5,6 and I give it a name of myArray 5 is a member of of myArray
Indexing: position of an element in an array 1st element is at index 0. The last element is one less than the size of the array
Another way to access the last element of an array is by entering arrayName[-1]
Lists Vs. Tuples. Lists can be used to store data similar to arrays and are mutable whereas tuples are immutable
Linked Lists: a chain of elements which are connected to its predecessors. The elements are called nodes.
Files
String Functions And Formatting
File I/O
Programming Paradigms:
      Functional: We break a problem into subsets. Every subset will have its designated function that will solve it in implementation
      Object Oriented: We have different classese each class is in charge of a task to perform and the scope is at the class's discretion
      Imperative: computation is performed in a sequence of steps similar to a recipe
      Logical: make assertions about a situation, lay out the facts we maintain data and tackle the problem by deduction similar to process of elimination
